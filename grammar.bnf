#
# BNF grammar for ESQL language
# for BeepBeep2, a complex event
# processing program (06-2014)
#

<exp_start>				:= <N-0_processor> .;

<N-0_processor>			:= <1-0_processor>;

<1-0_processor>			:= <print> | <stdout> | <stderr> | <out_to_file>;
<0-1_processor>			:= <yaml> | <input_file>;
<1-1_processor>			:= <constant>;
<2-1_processor>			:= <multiply>;

<file_processor>		:= <input_file> | <out_to_file>;


# 1 input 0 output processors
<print>					:= PRINT <print_opt> <0-1_processor> |
						   PRINT <print_opt> <1-1_processor> |
						   PRINT <print_opt> <2-1_processor> |
						   PRINT <0-1_processor> |
						   PRINT <1-1_processor> |
						   PRINT <2-1_processor>;

<stdout>				:= STDOUT <print_opt> <0-1_processor> |
						   STDOUT <print_opt> <1-1_processor> |
						   STDOUT <print_opt> <2-1_processor> |
						   STDOUT <0-1_processor> |
						   STDOUT <1-1_processor> |
						   STDOUT <2-1_processor>;

<stderr>				:= STDERR <print_opt> <0-1_processor> |
						   STDERR <print_opt> <1-1_processor> |
						   STDERR <print_opt> <2-1_processor> |
						   STDERR <0-1_processor> |
						   STDERR <1-1_processor> |
						   STDERR <2-1_processor>;

<print_opt>				:= AT <number> PER SECOND ALL OF | 
						   AT <number> PER SECOND <number> OF | 
						   AT <number> PER SECOND | 
						   <number> OF |
						   ON KEY <key> ALL OF |
						   ON KEY <key> <number> OF |
						   ON KEY <key> ;

<out_to_file>			:= OUTPUT TO FILE <filename> <out_opt> <0-1_processor> |
						   OUTPUT TO FILE <filename> <out_opt> <1-1_processor> |
						   OUTPUT TO FILE <filename> <out_opt> <2-1_processor> |
						   OUTPUT TO FILE <filename> <out_opt> <trace> |
						   OUTPUT TO FILE <filename> <0-1_processor> |
						   OUTPUT TO FILE <filename> <1-1_processor> |
						   OUTPUT TO FILE <filename> <2-1_processor> |
						   OUTPUT TO FILE <filename> <trace>;

<out_opt>				:= <number> OF | ALL OF;


# 0 input 1 output processors
<input_file>			:= INPUT FILE <filename> |
						   INPUT FILE <filename> <1-0_processor> |
						   INPUT FILE <filename> <1-1_processor>;
						   
<yaml>					:= YAML <file_processor>;


# COPY and MULTIPLY are arbitrary, for the sake of the tests
# 1 input 1 output processor
<constant>				:= COPY <trace>; 

# 2 input 1 output processor
<multiply>				:= MULTIPLY <trace> BY <trace>;

# 0 input 0 output "processor"
<trace>					:= <string>;


#constant terminals
<filename>				:= <string>;
<string>				:= ^"[^"]*";

<number>				:= ^[\d]*;

<key>					:= ^"[.]+" | ^"f[\d]" | 
						   "ENTER" | "CTRL" | "ALT" |Â "SHIFT" | 
						   "TAB" | "ESC" | "CAPS" | "BACK_S" | "DEL" |
						   "HOME" | "END" | "PAGE_UP" | "PAGE_DOWN" | "NUM_LOCK" |
						   "DOWN_ARROW" | "UP_ARROW" | "LEFT_ARROW" | "RIGHT_ARROW";